variables:
  AWS_REGION: us-east-1

stages:
  - infrastructure prerequisites
  - create infrastructure
  - build
  - test

verify state locking:
  stage: infrastructure prerequisites
  image:
    name: hashicorp/terraform:1.2.2
    entrypoint: [""]
  before_script:
    - apk add --no-cache curl python3 py-pip
    - pip install awscli
    - aws configure set region $AWS_REGION
  script:
    ### See if state-lock table exists (i.e. if state lock applied)
    - aws dynamodb describe-table --table-name product-hunting-terraform-state-lock

apply state locking:
  stage: infrastructure prerequisites
  needs: ["verify state locking"]
  when: on_failure
  image:
    name: hashicorp/terraform:1.2.2
    entrypoint: [""]
  before_script:
    - apk add --no-cache curl python3 py-pip
    - pip install awscli
    - aws configure set region $AWS_REGION
  script:
    - cd ./create-infrastructure/state-lock
    - terraform init
    - terraform apply -auto-approve

create production infrastructure:
  stage: create infrastructure
  image:
    name: hashicorp/terraform:1.2.2
    entrypoint: [""]
  before_script:
    - apk add --no-cache curl python3 py-pip
    - pip install awscli
    - aws configure set region $AWS_REGION
  script:
    - cd ./create-infrastructure
    ### Add personal public IP inside .tfvars
    - |
      cat <<EOF | tee ./main.tfvars
      my_ip = "$MY_IP/32"
      EOF
    - terraform init
    - terraform apply -var-file=main.tfvars -auto-approve

insert top products to database:
  stage: build
  image: alpine:3.16
  before_script:
    - apk add --no-cache python3 py3-pip
    - pip3 install sqlizer-io-client
  script:
    - cd ./application/backend/worker
    ### GET top 500 most voted posts from Product Hunt API (output .json file)
    - export API_ACCESS_TOKEN=$PRODUCT_HUNT_API_ACCESS_TOKEN
    - python3 getTopPosts.py
    ### Delete emojis inside .json file
    - sed -i -e 's/\(\\u\).\{4\}//g' posts.json
    ### Convert JSON to SQL
    - export API_KEY=$SQLIZER_API_KEY
    - python3 convertJsonToSql.py
    ### Reformat fields name & add id field
    - sed -i 's/list_node_//g' posts.sql
    - sed -i '2s/^/    "id" SERIAL PRIMARY KEY,\n/' posts.sql
    - sed -i "s/('/(DEFAULT,'/g" posts.sql
  cache: 
    key: $CI_COMMIT_REF_SLUG-POSTGRES
    paths:
      - $CI_PROJECT_DIR/application/backend/worker/

build client-server application modules:
  stage: build
  image: alpine:3.16
  cache: 
    key: $CI_COMMIT_REF_SLUG-NODE-MODULES
    paths:
      - $CI_PROJECT_DIR/application/backend/api/node_modules/
      - $CI_PROJECT_DIR/application/frontend/client/node_modules/
  before_script:
    - apk add --no-cache nodejs npm
  script:
    ### Server-side
    - cd $CI_PROJECT_DIR/application/backend/api
    - npm install express pg cors dotenv
    ### Client-side
    - cd $CI_PROJECT_DIR/application/frontend/client
    - npm install


smoke test:
  stage: test
  image: alpine:3.16
  cache: 
    -
      key: $CI_COMMIT_REF_SLUG-NODE-MODULES
      paths:
        - $CI_PROJECT_DIR/application/backend/api/node_modules/
        - $CI_PROJECT_DIR/application/frontend/client/node_modules/
    -
      key: $CI_COMMIT_REF_SLUG-POSTGRES
      paths:
        - $CI_PROJECT_DIR/application/backend/worker/
  services:
    - postgres:alpine3.16
  variables:
    POSTGRES_USER: $POSTGRES_USER
    POSTGRES_PASSWORD: $POSTGRES_PASSWORD
    POSTGRES_DB: $POSTGRES_DATABASE
    POSTGRES_HOST_AUTH_METHOD: trust
  before_script:
    - apk add --no-cache postgresql-client nodejs npm curl
  script:
    ### Push .sql file to Postgres DB
    - cd $CI_PROJECT_DIR/application/backend/worker
    - psql -h postgres -U $POSTGRES_USER -d $POSTGRES_DATABASE -f posts.sql
    ### Launch server API
    - cd $CI_PROJECT_DIR/application/backend/api
    - |
      cat <<EOF | tee .env
      POSTGRES_USER="$POSTGRES_USER"
      POSTGRES_PASSWORD="$POSTGRES_PASSWORD"
      POSTGRES_DATABASE="$POSTGRES_DATABASE"
      POSTGRES_HOST="postgres"
      POSTGRES_PORT=5432
      EOF
    - node index index.js &
    ### Launch client Web application
    - cd $CI_PROJECT_DIR/application/frontend/client
    - |
      cat <<EOF | tee .env
      REACT_APP_API_URL="$API_URL"
      EOF
    - npm start &
    ### Smoke test
    - sleep 15
    - curl http://localhost:3000
